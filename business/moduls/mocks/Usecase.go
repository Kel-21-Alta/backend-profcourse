// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	moduls "profcourse/business/moduls"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// CalculateScoreCourse provides a mock function with given fields: ctx, domain
func (_m *Usecase) CalculateScoreCourse(ctx context.Context, domain *moduls.ScoreUserModul) (moduls.ScoreUserModul, error) {
	ret := _m.Called(ctx, domain)

	var r0 moduls.ScoreUserModul
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.ScoreUserModul) moduls.ScoreUserModul); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(moduls.ScoreUserModul)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.ScoreUserModul) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModul provides a mock function with given fields: ctx, domain
func (_m *Usecase) CreateModul(ctx context.Context, domain *moduls.Domain) (moduls.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 moduls.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.Domain) moduls.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(moduls.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateScoreModul provides a mock function with given fields: ctx, domain
func (_m *Usecase) CreateScoreModul(ctx context.Context, domain *moduls.ScoreUserModul) (moduls.ScoreUserModul, error) {
	ret := _m.Called(ctx, domain)

	var r0 moduls.ScoreUserModul
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.ScoreUserModul) moduls.ScoreUserModul); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(moduls.ScoreUserModul)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.ScoreUserModul) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModul provides a mock function with given fields: ctx, domain
func (_m *Usecase) DeleteModul(ctx context.Context, domain *moduls.Domain) (moduls.Message, error) {
	ret := _m.Called(ctx, domain)

	var r0 moduls.Message
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.Domain) moduls.Message); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(moduls.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllModulCourse provides a mock function with given fields: ctx, domain
func (_m *Usecase) GetAllModulCourse(ctx context.Context, domain *moduls.Domain) ([]moduls.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 []moduls.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.Domain) []moduls.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]moduls.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneModul provides a mock function with given fields: ctx, domain
func (_m *Usecase) GetOneModul(ctx context.Context, domain *moduls.Domain) (moduls.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 moduls.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.Domain) moduls.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(moduls.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModul provides a mock function with given fields: ctx, domain
func (_m *Usecase) UpdateModul(ctx context.Context, domain *moduls.Domain) (moduls.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 moduls.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *moduls.Domain) moduls.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(moduls.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *moduls.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
