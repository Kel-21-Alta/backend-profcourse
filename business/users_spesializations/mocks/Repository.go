// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	users_spesializations "profcourse/business/users_spesializations"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetEndRollSpesializationById provides a mock function with given fields: ctx, domain
func (_m *Repository) GetEndRollSpesializationById(ctx context.Context, domain *users_spesializations.Domain) (users_spesializations.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 users_spesializations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *users_spesializations.Domain) users_spesializations.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(users_spesializations.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *users_spesializations.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterSpesialization provides a mock function with given fields: ctx, domain
func (_m *Repository) RegisterSpesialization(ctx context.Context, domain *users_spesializations.Domain) (users_spesializations.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 users_spesializations.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *users_spesializations.Domain) users_spesializations.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(users_spesializations.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *users_spesializations.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
