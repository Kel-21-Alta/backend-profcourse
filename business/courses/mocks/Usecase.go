// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	courses "profcourse/business/courses"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// CreateCourse provides a mock function with given fields: ctx, domain
func (_m *Usecase) CreateCourse(ctx context.Context, domain *courses.Domain) (*courses.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 *courses.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *courses.Domain) *courses.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *courses.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCourse provides a mock function with given fields: ctx, id, token
func (_m *Usecase) DeleteCourse(ctx context.Context, id string, token courses.Token) (courses.Domain, error) {
	ret := _m.Called(ctx, id, token)

	var r0 courses.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, courses.Token) courses.Domain); ok {
		r0 = rf(ctx, id, token)
	} else {
		r0 = ret.Get(0).(courses.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, courses.Token) error); ok {
		r1 = rf(ctx, id, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCourseUser provides a mock function with given fields: ctx, domain
func (_m *Usecase) GetAllCourseUser(ctx context.Context, domain *courses.Domain) ([]courses.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 []courses.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *courses.Domain) []courses.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *courses.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCourses provides a mock function with given fields: ctx, domain
func (_m *Usecase) GetAllCourses(ctx context.Context, domain *courses.Domain) (*[]courses.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 *[]courses.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *courses.Domain) *[]courses.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *courses.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountCourse provides a mock function with given fields: ctx
func (_m *Usecase) GetCountCourse(ctx context.Context) (*courses.Summary, error) {
	ret := _m.Called(ctx)

	var r0 *courses.Summary
	if rf, ok := ret.Get(0).(func(context.Context) *courses.Summary); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*courses.Summary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneCourse provides a mock function with given fields: ctx, domain
func (_m *Usecase) GetOneCourse(ctx context.Context, domain *courses.Domain) (*courses.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 *courses.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *courses.Domain) *courses.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *courses.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCourse provides a mock function with given fields: ctx, domain, token
func (_m *Usecase) UpdateCourse(ctx context.Context, domain *courses.Domain, token *courses.Token) (courses.Domain, error) {
	ret := _m.Called(ctx, domain, token)

	var r0 courses.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *courses.Domain, *courses.Token) courses.Domain); ok {
		r0 = rf(ctx, domain, token)
	} else {
		r0 = ret.Get(0).(courses.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *courses.Domain, *courses.Token) error); ok {
		r1 = rf(ctx, domain, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
